#!/usr/bin/env bash
#set -e
[ -n "$TSGC_DEBUG" ] && set -x


# Config
sessionsDir="$(pwd)/.tmux.session"
tmpDir=$(mktemp -d)


# Misc
removeDir() {
  if [[ -d "${1}" ]]; then
    rm -r "${1}"
  fi
}

saveTmuxConf() {
# All options are restored as session options, so new global and server options
# are not interfered with.
  echo -e "\n### Global Options" > "$2"
  while IFS=$'\n' read -r tmux_option; do
    echo "set-option ${tmux_option}" >> "$2"
  done < <(tmux show-options -g)

  echo -e "\n### Server Options" >> "$2"
  while IFS=$'\n' read -r tmux_option; do
    echo "set-option ${tmux_option}" >> "$2"
  done < <(tmux show-options -s)

  echo -e "\n### Session Options" >> "$2"
  while IFS=$'\n' read -r tmux_option; do
    echo "set-option ${tmux_option}" >> "$2"
  done < <(tmux show-options -t "$1")
}

saveBashHistory() {
  echo '' > "${pane_saveDir}/${process_pid}/bashHistory"
  tmux send-keys -t "${pane_target}" "C-e" "C-u" "history -w '${pane_saveDir}/${process_pid}/bashHistory'" "Enter" "C-y"
  echo "tmux send-keys -t \"${pane_target}\" \"history -r '${pane_saveDir}/${process_pid}/bashHistory'\" \"Enter\"" >> "${session_restoreFile}"
}

saveHistoryBuffer() {
# for now, only works with bash
  echo '' > "${pane_saveDir}/${process_pid}/historyBuffer"
  tmux capture-pane -S -999999 -t "${pane_id}"
  tmux save-buffer -b 0 "${pane_saveDir}/${process_pid}/historyBuffer"
  tmux delete-buffer -b 0
  echo "tmux send-keys -t \"${pane_target}\" \"cat '${pane_saveDir}/${process_pid}/historyBuffer'\" \"Enter\"" >> "${session_restoreFile}"
}

saveVim() {
  mkdir -p "${pane_saveDir}/${process_pid}/vim"
  local save_script=$(mktemp --tmpdir="${tmpDir}")
  local load_script="${pane_saveDir}/${process_pid}/vim/load_script"
  echo '' > "${load_script}"
  saveVimSession
  tmux send-keys -t "${pane_target}" "Escape" ":source ${save_script}" "Enter"
  printf "tmux send-keys -t \"${pane_target}\" 'vim -S \"%q/%q/vim/load_script\"' \"Enter\"\n" "${pane_saveDir}" "${process_pid}" >> "${session_restoreFile}"
}

saveVimSession() {
  printf 'mksession! %q/%q/vim/session\n' "${pane_saveDir}" "${process_pid}" >> "${save_script}"
  printf 'source "%q/%q/vim/session"\n' "${pane_saveDir}" "${process_pid}" >> "${load_script}"
}

getForegroundProcess() {
  while IFS=$'\n' read -r process; do
    IFS=' ' read foregroundProcess_pid foregroundProcess_comm foregroundProcess_tpgid <<<"$process"
    if [[ "$foregroundProcess_tpgid" -eq "$foregroundProcess_pid" ]]; then
      return 0
    fi
  done < <(ps -o pid=,comm=,tpgid= --tty "$pane_tty")

  return 1
}

saveProcess() {
  local process_comm="$2"
  local process_pid="$1"

  mkdir -p "${pane_saveDir}/${1}"

  if [[ "$process_comm" == "vim" ]]; then
    # vim plugin: save session
    saveVim
  elif [[ "$process_comm" == "bash" ]]; then
    # bash plugin: save bash history
    saveBashHistory
    saveHistoryBuffer
  else
    removeDir "$session_saveDir"
    echo "tmux sgc: process (pid: ${process_pid}) in pane not "\
      "recognized. The term process refers to the process's program."\
      "A process must have a save and restore action associated with "\
      "it. tmux sgc does not magically know how to handle unknown"\
      " processes. Create a plugin for the process or an"\
      " issue." >&2
    exit 1
  fi
}

# Global
#globalEnvironment=$(tmux show-environment -g)

# Paste Buffers
pasteBuffersTmpDir=$(mktemp -d --tmpdir="${tmpDir}")
pasteBuffers=$(tmux list-buffers)

mkdir "$pasteBuffersTmpDir"

if [[ -n "$pasteBuffers" ]]; then
  while IFS=$'\n' read -r buffer
  do
    IFS=': ' read -a bufferInfo <<<"$buffer"

    tmux save-buffer -b "${bufferInfo[0]}" "${pasteBuffersTmpDir}/${bufferInfo[0]}"
  done <<<"$pasteBuffers"
fi


# Sessions
if [[ ! -d "${sessionsDir}" ]]; then
  mkdir "${sessionsDir}"

  if [[ $? -ne 0 ]]; then
    echo "tmux sgc: failed to make session storage directory" >&2
    exit 1
  fi
fi

server_sessionList=$(tmux list-sessions -F "#{session_name}"$'\036'"#{session_attached}")

if [[ -n "$server_sessionList" ]]; then

  # hook sessions
  while IFS=$'\n' read -r session; do
    IFS=$'\036' read session_name session_attached <<<"$session"
    #session_env=$(tmux show-environment -t "${session_name}")
    session_windowList=$(tmux list-windows -t "${session_name}" -F "#{window_name}"$'\036'"#{window_index}"$'\036'"#{window_layout}"$'\036'"#{window_active}"$'\036'"#{window_flags}")
    session_saveDir="${sessionsDir}/${session_name}"
    session_restoreFile="${session_saveDir}/session"
    # the users "~/.tmux.conf" is not used
    session_tmuxConf="${session_saveDir}/.tmux.conf"
    window_num=0

    mkdir -p "$session_saveDir"

    saveTmuxConf "$session_name" "$session_tmuxConf"

    echo "#!/usr/bin/env bash" > "${session_restoreFile}"
    echo "# # session: ${session_name}" >> "${session_restoreFile}"
    cat >> "$session_restoreFile" <<-EOL
      tmux has-session -t "${session_name}" &>/dev/null
      if [[ ! \$? ]]; then
        echo "The session \"${session_name}\" already exists. This script does not overwrite sessions." >&2
        exit 1
      fi
EOL

    # hook session
    while IFS=$'\n' read -r window; do
      IFS=$'\036' read window_name window_index window_layout window_active window_flags <<<"$window"
      window_target="${session_name}:${window_index}"
      window_paneList=$(tmux list-panes -t "${window_target}" -F "#{pane_id}"$'\036'"#{pane_start_path}"$'\036'"#{pane_start_command}"$'\036'"#{pane_active}"$'\036'"#{pane_pid}")
      window_saveDir="${session_saveDir}/${window_num}"
      window_tmuxConf="${window_saveDir}/.tmux.conf"
      pane_num=0

      mkdir -p "$window_saveDir"

      echo -e "\n# ## window: ${window_name}" >> "${session_restoreFile}"

      # save tmux window options
      echo -e "\n## Window $window_num Options" > "$window_tmuxConf"
      while IFS=$'\n' read -r tmux_option; do
        echo "tmux set-option -w -t ${window_target} ${tmux_option}" >> "$window_tmuxConf"
      done < <(tmux show-options -w -t "${window_target}")

      # hook window
      while IFS=$'\n' read -r pane; do
        IFS=$'\036' read pane_id pane_start_path pane_start_command pane_active pane_pid <<<"$pane"
        IFS=' ' read pane_comm pane_tpgid pane_tty < <(ps -o comm=,tpgid=,tty= --pid "$pane_pid")
        pane_target="${window_target}.${pane_num}"
        pane_saveDir="${window_saveDir}/${pane_num}"

        mkdir -p "${pane_saveDir}"

        echo -e "\n# ### pane: ${pane_num}" >> "${session_restoreFile}"

        # save panes
        #
        # starting a new session or window inherantly includes a new pane. So,
        # their commands are built when looping through panes, panes are available.
        #

        # if the "default-path" option is set to ".", which is the default,
        # ensure the starting directory, ".", is the default path. The "default-path"
        # option is currently not checked, but may be soon. Until then, assume
        # it is set to ".".
        if [[ -n "${pane_start_path}" ]]; then
          echo "(" >> "${session_restoreFile}"
          echo "  cd \"${pane_start_path}\" &&" >> "${session_restoreFile}"
          echo -en "  " >> "${session_restoreFile}"
        fi

        if [[ "$pane_num" == 0 ]]; then
          if [[ "$window_num" == 0 ]]; then
            echo "tmux -f \"${session_tmuxConf}\" new-session -d -s \"${session_name}\" -n \"${window_name}\" \"${pane_start_command}\"" >> "${session_restoreFile}"
          else
            echo "tmux new-window -d -n \"${window_name}\" \"${pane_start_command}\"" >> "${session_restoreFile}"
          fi
        else
          echo "tmux split-window -d -t \"${window_target}."$((pane_num - 1))"\" \"${pane_start_command}\"" >> "${session_restoreFile}"
        fi

        if [[ -n "${pane_start_path}" ]]; then
          echo ") || {" >> "${session_restoreFile}"
          echo "  exit 1;" >> "${session_restoreFile}"
          echo "}" >> "${session_restoreFile}"
        fi

        if [[ "$pane_num" == 0 ]]; then
          # add restore tmux window options
          echo ". \"${window_tmuxConf}\"" >> "${session_restoreFile}"
        fi

        # save environment per pane, PID
        # /proc/<PID>/environ

        # action based on pid
        # TODO change into a plugin interface:
        # the process tree will be available to plugins, so the plugins may
        # take action based on order and parent processes to ensure the correct
        # saving and restoration steps are taken
        #
        # 1. Find the foreground process.
        # 2. take action on it (e.g. save it's "session")
        # TODO:
        # 3. pause it (send to background or kill)
        # 4. repeat steps 1-3 until foreground process id is the pane_pid
        # 5. restore paused processes (foreground or rebuild)

        if [[ "$pane_tpgid" -eq "$pane_pid" ]]; then
            saveProcess "$pane_pid" "$pane_comm"
        else
          foregroundProcess_pid='';
          foregroundProcess_comm='';
          foregroundProcess_tpgid='';
          getForegroundProcess

          if [[ $? -eq 0 ]]; then
            saveProcess "$foregroundProcess_pid" "$foregroundProcess_comm"
          else
            echo "tmux sgc: Failed to find foreground process in tmux target \"$pane_target\"." >&2
            exit 1
          fi
        fi

        # afs retoken
        #http://www.sph.umich.edu/computing/unix/screen.html
        #kinit ; aklog

        # save and select active pane
        if [[ "${pane_active}" == 1 ]]; then
          echo "tmux select-pane -t \"${pane_target}\"" >> "${session_restoreFile}"
        fi

        (( pane_num += 1 ))
      done <<<"$window_paneList"

      echo "tmux select-layout -t \"${window_target}\" '${window_layout}'" >> "${session_restoreFile}"

      # save and select active window
      if [ "${window_active}" == 1 ]; then
        echo "tmux select-window -t \"${window_target}\"" >> "${session_restoreFile}"
      fi

      (( window_num += 1 ))
    done <<<"$session_windowList"

    # save paste buffers
    #
    # a copy of the global buffers is saved for each session. And, buffers are
    # appended to the buffer list when loaded.
    #
    # So, loading multiple sessions may cause loading of duplicate buffers.
    # Implementing buffer hash checking may be used to avoid duplicates.
    #
    # Also, a global hash based storage may be used to avoid duplicates when
    # storing the paste buffers. However, the paste buffers would not longer be
    # stored with the session.
    if [[ -n "$pasteBuffers" ]]; then
      mkdir -p "${session_saveDir}/pasteBuffers"
      cp -a "${pasteBuffersTmpDir}/*" "${session_saveDir}/pasteBuffers"

      find "${session_saveDir}/pasteBuffers" -maxdepth 1 -type f -print0 | while IFS= read -r -d $'\0' bufferFile; do
        echo "tmux load-buffer \"${bufferFile}\"" >> "${session_restoreFile}"
      done
    fi

    # save and attach active session
    if [ "${session_attached}" == 1 ]; then
      echo "tmux attach-session -t \"${session_name}\"" >> "${session_restoreFile}"
    fi

    # modify to be executable
    chmod +x "${session_restoreFile}"
  done <<<"$server_sessionList"
else
  echo "tmux sgc: no sessions exist to be saved" >&2
  removeDir "$tmpDir"
  exit 1
fi


# cleanup
removeDir "$tmpDir"


# bye
exit 0
