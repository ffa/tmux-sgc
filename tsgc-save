#!/usr/bin/env bash
#set -e
[ -n "$TSGC_DEBUG" ] && set -x


# Config
sessionsDir="$(pwd)/.tmux.session"
tmpDir=$(mktemp -d)


# Misc
removeDir() {
  if [[ -d "${1}" ]]; then
    rm -r "${1}"
  fi
}

saveTmuxConf() {
  echo "### Global Options" > "$2"
  tmux show-options -g >> "$2"

  echo -e "\n### Server Options" >> "$2"
  tmux show-options -s >> "$2"

  echo -e "\n### Session Options" >> "$2"
  tmux show-options -t "$1" >> "$2"
}

saveBashHistory() {
  gdb -batch -x <<-EOF
	attach $1
	call write_history("${session_saveDir}/${pane_target}/${1}.bashHistory")
	
	EOF

  echo "tmux send-keys -t \"${pane_target}\" \"history -r '${session_saveDir}/${pane_target}/${1}.bashHistory'\" \"Enter\"" >> "${session_restoreFile}"
}

saveVimSession() {
  vimSessionFile=$(printf ':mksession! %q/%q/%q.vimSession\n' "${session_saveDir}" "${pane_target}" "${1}")
  tmux send-keys -t "${pane_target}" "Escape" "${vimSessionFile}" "Enter"
  printf "tmux send-keys -t \"${pane_target}\" 'vim -S \"%q/%q/%q.vimSession\"' \"Enter\"\n" "${session_saveDir}" "${pane_target}" "${1}" >> "${session_restoreFile}"
}


# Global
globalEnvironment=$(tmux show-environment -g)
globalOptions="$(tmux show-options -g)"


# Server
serverOptions="$(tmux show-options -s)"


# Paste Buffers
pasteBuffersTmpDir="${tmpDir}/pasteBuffers"
pasteBuffers=$(tmux list-buffers)

mkdir "$pasteBuffersTmpDir"

if [[ -n "$pasteBuffers" ]]; then
  while IFS=$'\n' read -r buffer
  do
    IFS=': ' read -a bufferInfo <<<"$buffer"

    tmux save-buffer -b "${bufferInfo[0]}" "${pasteBuffersTmpDir}/${bufferInfo[0]}"
  done <<<"$pasteBuffers"
fi


# Sessions
if [[ ! -d "${sessionsDir}" ]]; then
  mkdir "${sessionsDir}"
fi

server_sessionList=$(tmux list-sessions -F "#{session_name}"$'\036'"#{session_attached}")

if [[ -n "$server_sessionList" ]]; then
  while IFS=$'\n' read -r session; do
    IFS=$'\036' read session_name session_attached <<<"$session"
    #session_env=$(tmux show-environment -t "${session_name}")
    session_windowList=$(tmux list-windows -t "${session_name}" -F "#{window_name}"$'\036'"#{window_index}"$'\036'"#{window_layout}"$'\036'"#{window_active}"$'\036'"#{window_flags}")
    session_saveDir="${sessionsDir}/${session_name}"
    session_restoreFile="${session_saveDir}/session"
    # the users "~/.tmux.conf" is not used
    session_tmuxConf="${session_saveDir}/.tmux.conf"
    window_num=0

    if [[ ! -d "$session_saveDir" ]]; then
      mkdir "$session_saveDir"
    fi

    saveTmuxConf "$session_name" "$session_tmuxConf"

    echo "#!/usr/bin/env bash" > "${session_restoreFile}"
    echo "# # session: ${session_name}" >> "${session_restoreFile}"
    cat >> "$session_restoreFile" <<-EOL
			tmux has-session -t "${session_name}" &>/dev/null
			if [[ ! \$? ]]; then
			  echo "The session \"${session_name}\" already exists. This script does not overwrite sessions." >&2
			  exit 1
			fi
		EOL

    while IFS=$'\n' read -r window; do
      IFS=$'\036' read window_name window_index window_layout window_active window_flags <<<"$window"
      window_target="${session_name}:${window_index}"
      window_paneList=$(tmux list-panes -t "${window_target}" -F "#{pane_id}"$'\036'"#{pane_start_path}"$'\036'"#{pane_start_command}"$'\036'"#{pane_active}"$'\036'"#{pane_pid}")
      pane_num=0

      # TODO: a per window tmux save and restore.
      # currently, the window tmux configs are saved to the session tmux conf
      # which will cause the last saved window's tmux conf to win and be set
      # for all windows.
      echo -e "\n### Window Options" >> "$session_tmuxConf"
      tmux show-options -w -t "${window_target}" >> "$session_tmuxConf"

      echo -e "\n# ## window: ${window_name}" >> "${session_restoreFile}"

      while IFS=$'\n' read -r pane; do
        IFS=$'\036' read pane_id pane_start_path pane_start_command pane_active pane_pid <<<"$pane"
        pane_comm=($(</proc/${pane_pid}/comm))
        pane_target="${window_target}.${pane_num}"
        pane_historyBufferFile="${session_saveDir}/${pane_target}/historyBuffer"

        mkdir -p "${session_saveDir}/${pane_target}"

        echo -e "\n# ### pane: ${pane_num}" >> "${session_restoreFile}"

        # save and load panes
        #
        # starting a new session or window inherantly includes a new pane. So,
        # their commands are built when looping through panes, panes are available.
        #

        # if the "default-path" option is set to ".", which is the default,
        # ensure the starting directory, ".", is the default path. The "default-path"
        # option is currently not checked, but may be soon. Until then, assume
        # it is set to ".".
        if [[ -n "${pane_start_path}" ]]; then
          echo "(" >> "${session_restoreFile}"
          echo "  cd \"${pane_start_path}\" &&" >> "${session_restoreFile}"
          echo -en "  " >> "${session_restoreFile}"
        fi

        if [[ "$pane_num" == 0 ]]; then
          if [[ "$window_num" == 0 ]]; then
            echo "tmux -f \"${session_tmuxConf}\" new-session -d -s \"${session_name}\" -n \"${window_name}\" \"${pane_start_command}\"" >> "${session_restoreFile}"
          else
            echo "tmux new-window -d -n \"${window_name}\" \"${pane_start_command}\"" >> "${session_restoreFile}"
          fi
        else
          echo "tmux split-window -d -t \"${window_target}."$((pane_num - 1))"\" \"${pane_start_command}\"" >> "${session_restoreFile}"
        fi

        if [[ -n "${pane_start_path}" ]]; then
          echo ") || {" >> "${session_restoreFile}"
          echo "  exit 1;" >> "${session_restoreFile}"
          echo "}" >> "${session_restoreFile}"
        fi

        # save environment per pane, PID
        # /proc/<PID>/environ

        # save and load history buffer
        # this method relies on bash to restore the history. So, if bash
        # isn't the $pane_pid, restoration fails.
        tmux capture-pane -S -999999 -t "${pane_id}"
        tmux save-buffer -b 0 "$pane_historyBufferFile"
        tmux delete-buffer -b 0

        echo "tmux send-keys -t \"${pane_target}\" 'cat \"${pane_historyBufferFile}\" > \$(tty)' \"Enter\"" >> "${session_restoreFile}"
 
        # action based on pid
        # TODO: change into a plugin interface:
        # the process tree will be available to plugins, so the plugins may
        # take action based on order and parent processes to ensure the correct
        # saving and restoration steps are taken
        pane_processes=$(ps -o pid=,comm= --ppid "${pane_pid}")
        pane_processes="${pane_pid} ${pane_comm}$'\n'${pane_pid_children}"
        while IFS=$'\n' read -r process; do
          IFS=' ' read process_pid process_comm <<<"$process"

          if [[ "$process_comm" == "vim" ]]; then
            # vim plugin: save session
            saveVimSession "$process_pid"
          elif [[ "$process_comm" == "bash" ]]; then
            # bash plugin: save bash history
            saveBashHistory "$process_pid"
          else
            removeDir "$session_saveDir"
            echo "tmux sgc: process in pane not recognized. "\
              "A process must have a save and restore action associated with "\
              "it. tmux sgc does not magically know how to handle unknown"\
              " processes, programs." >&2
          fi
        done <<<"$pane_processes"
        
        # afs retoken
        #http://www.sph.umich.edu/computing/unix/screen.html
        #kinit ; aklog

        # save and select active pane
        if [[ "${pane_active}" == 1 ]]; then
          echo "tmux select-pane -t \"${pane_target}\"" >> "${session_restoreFile}"
        fi

        (( pane_num += 1 ))
      done <<<"$window_paneList"

      echo "tmux select-layout -t \"${window_target}\" '${window_layout}'" >> "${session_restoreFile}"

      # save and select active window
      if [ "${window_active}" == 1 ]; then
        echo "tmux select-window -t \"${window_target}\"" >> "${session_restoreFile}"
      fi

      (( window_num += 1 ))
    done <<<"$session_windowList"

    # save and load paste buffers
    #
    # a copy of the global buffers is saved for each session. And, buffers are
    # appended to the buffer list when loaded.
    #
    # So, loading multiple sessions may cause loading of duplicate buffers.
    # Implementing buffer hash checking may be used to avoid duplicates.
    #
    # Also, a global hash based storage may be used to avoid duplicates when
    # storing the paste buffers. However, the paste buffers would not longer be
    # stored with the session.
    if [[ -n "$pasteBuffers" ]]; then
      mkdir -p "${session_saveDir}/pasteBuffers"
      cp -a "${pasteBuffersTmpDir}/*" "${session_saveDir}/pasteBuffers"

      find "${session_saveDir}/pasteBuffers" -maxdepth 1 -type f -print0 | while IFS= read -r -d $'\0' bufferFile; do
        echo "tmux load-buffer \"${bufferFile}\"" >> "${session_restoreFile}"
      done
    fi

    # save and attach active session
    if [ "${session_attached}" == 1 ]; then
      echo "tmux attach-session -t \"${session_name}\"" >> "${session_restoreFile}"
    fi

    # modify to be executable
    chmod +x "${session_restoreFile}"
  done <<<"$server_sessionList"
else
  echo "tmux sgc: no sessions exist to be saved" >&2
  removeDir "$tmpDir"
  exit 1
fi


# cleanup
removeDir "$tmpDir"


# bye
exit 0
